version: '3.8'

services:
  # Docs2App main application
  docs2app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: docs2app
    volumes:
      - ./pdfs:/app/pdfs
      - ./output:/app/output
      - ./config.yaml:/app/config.yaml
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - OLLAMA_BASE_URL=http://ollama:11434
    depends_on:
      - ollama
    networks:
      - docs2app-network
    command: tail -f /dev/null  # Keep container running for interactive use

  # Ollama service for local AI
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    networks:
      - docs2app-network
    restart: unless-stopped
    # Pull model on startup
    entrypoint: >
      sh -c "
      /bin/ollama serve &
      sleep 10 &&
      ollama pull llama3.1:8b &&
      wait
      "

  # Optional: Redis for caching (if needed in future)
  redis:
    image: redis:7-alpine
    container_name: docs2app-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - docs2app-network
    restart: unless-stopped
    profiles:
      - full

  # Optional: PostgreSQL for data persistence (if needed in future)
  postgres:
    image: postgres:15-alpine
    container_name: docs2app-postgres
    environment:
      - POSTGRES_DB=docs2app
      - POSTGRES_USER=docs2app
      - POSTGRES_PASSWORD=docs2app_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - docs2app-network
    restart: unless-stopped
    profiles:
      - full

volumes:
  ollama_data:
  redis_data:
  postgres_data:

networks:
  docs2app-network:
    driver: bridge